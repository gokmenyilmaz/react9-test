{"version":3,"sources":["logo.svg","Rapor.jsx","RcIf.js","Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Rapor","Component","If","boolean","children","TabPane","Tabs","Home","props","modules","toolbar","formats","state","text","handleChange","bind","value","this","setState","defaultActiveKey","tab","key","App","basename","style","display","width","boxSizing","height","padding","background","to","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,oJCEtBC,G,+LAMb,OACI,0C,GAPuBC,c,mCCFpB,SAASC,EAAT,GAAkC,IAArBC,EAAoB,EAApBA,QAChBC,EADoC,2BACpCA,SACR,OAAID,EACO,eACKC,GAET,KAGJ,I,SCCCC,G,cAAYC,IAAZD,SAGaE,E,YAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAORC,QAAU,CAERC,QAAS,CACP,CAAC,CAAE,OAAU,CAAC,EAAG,GAAG,KACpB,CAAC,OAAQ,SAAU,YAAY,SAAU,cACzC,CAAC,CAAC,KAAQ,WAAY,CAAC,KAAQ,UAAW,CAAC,OAAU,MAAO,CAAC,OAAU,OACvE,CAAC,OAAQ,SACT,CAAC,WAfY,EAmBjBC,QAAU,CACR,SACA,OAAQ,SAAU,YAAa,SAAU,aACzC,OAAQ,SAAU,SAClB,OAAQ,SArBR,EAAKC,MAAQ,CAAEC,KAAM,IACrB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHL,E,0EA2BJC,GACXC,KAAKC,SAAS,CAAEL,KAAMG,M,+BAOtB,OACE,kBAACd,EAAD,CAAIC,SAAS,GACX,kBAAC,IAAD,CAAMgB,iBAAiB,KACrB,kBAACd,EAAD,CAASe,IAAI,QAAQC,IAAI,KAAzB,wBALM,EAkBJ,kBAAChB,EAAD,CAASe,IAAI,QAAQC,IAAI,KAAzB,e,GArDkBpB,a,gBCJbqB,E,iLAKjB,OAGI,kBAAC,IAAD,CAAQC,SAAS,iBACf,6BAASC,MAAO,CAACC,QAAQ,OAAQC,MAAM,OAAOC,UAAU,aAAcC,OAAO,QAASC,QAAQ,OAAQC,WAAW,WAE/G,yBAAKN,MAAO,CAACM,WAAW,MAAMJ,MAAM,UAClC,4BACE,gCAAK,kBAAC,IAAD,CAAMK,GAAG,KAAT,SACL,gCAAK,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAKT,0BAAMP,MAAO,CAACM,WAAW,SAASJ,MAAM,SAEtC,uCAIA,6BACE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SAASC,UAAWlC,Y,GA7BdmC,IAAMlC,WCGpBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.527f2663.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react'\r\n\r\nexport default class Rapor extends Component {\r\n    render() {\r\n\r\n        var a=30;\r\n        var y=a*2;\r\n\r\n        return (\r\n            <div>\r\n                Rapor\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default function If({boolean, ...props}) {\r\n    const { children } = props;\r\n    if (boolean)\r\n        return (\r\n                {...children}\r\n        );\r\n    return null;\r\n}\r\n\r\nexport const Ifc = ({ condition, children }) => {\r\n    if (condition) {\r\n      return children;\r\n    }\r\n  };","import React, { Component } from 'react'\r\nimport ReactQuill, {Quill}  from 'react-quill'\r\nimport If,{Ifc} from './RcIf'\r\nimport { Tabs } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nimport 'react-quill/dist/quill.snow.css'; // ES6\r\n\r\n\r\nconst { TabPane } = Tabs;\r\n\r\n\r\nexport default class Home extends Component {\r\n   \r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { text: '' } \r\n        this.handleChange = this.handleChange.bind(this)\r\n\r\n      \r\n      }\r\n\r\n      modules = {\r\n       \r\n        toolbar: [\r\n          [{ 'header': [1, 2, false] }],\r\n          ['bold', 'italic', 'underline','strike', 'blockquote'],\r\n          [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],\r\n          ['link', 'image'],\r\n          ['clean']\r\n        ],\r\n      }\r\n    \r\n      formats = [\r\n        'header',\r\n        'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n        'list', 'bullet', 'indent',\r\n        'link', 'image'\r\n      ];\r\n    \r\n      \r\n      handleChange(value) {\r\n        this.setState({ text: value })\r\n      }\r\n    \r\n      render() {\r\n\r\n        var idariMi=false;\r\n\r\n        return (\r\n          <If boolean={true}>\r\n            <Tabs defaultActiveKey=\"1\">\r\n              <TabPane tab=\"Tab 1\" key=\"1\">\r\n                Tab 1 - Yeniversion\r\n              </TabPane>\r\n\r\n         \r\n            {\r\n              idariMi &&\r\n              <TabPane tab=\"Tab 2\"  key=\"2\">\r\n                Tab 2\r\n              </TabPane>\r\n             }\r\n      \r\n             \r\n                <TabPane tab=\"Tab 3\" key=\"3\">\r\n                  Tab 3\r\n                </TabPane>\r\n            \r\n            </Tabs>\r\n          </If>\r\n        \r\n         \r\n        )\r\n      }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Rapor from './Rapor';\r\nimport Home from './Home'\r\n\r\nimport { BrowserRouter as Router, Route,Link } from \"react-router-dom\";\r\n\r\nexport default class App extends  React.Component\r\n{\r\n\r\n\r\n  render() {\r\n    return (\r\n     \r\n      \r\n        <Router basename=\"/react9-test/\">\r\n          <section style={{display:'flex', width:'100%',boxSizing:'border-box', height:'100vh', padding:'20px', background:'yellow'}}>\r\n           \r\n            <nav style={{background:'red',width:'200px'}}>\r\n              <ul >\r\n                <li> <Link to=\"/\">Home</Link></li>\r\n                <li> <Link to=\"/rapor\">About</Link></li>\r\n              </ul>\r\n            </nav>\r\n          \r\n          \r\n            <main style={{background:'orange',width:'100%'}}>\r\n\r\n              <div>\r\n                Ãœst\r\n              </div>\r\n              \r\n              <div>\r\n                <Route exact path=\"/\">\r\n                  <Home />\r\n                </Route>\r\n                <Route path=\"/rapor\" component={Rapor}/>\r\n              </div>\r\n            </main>\r\n        \r\n\r\n          </section>\r\n        </Router>\r\n        \r\n      \r\n  )}\r\n}\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}